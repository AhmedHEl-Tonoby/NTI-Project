# provider "aws" {
#   region = "your_aws_region"
# }

# # Create VPC
# resource "aws_vpc" "main" {
#   cidr_block = "10.0.0.0/16"
# }

# # Create Subnets
# resource "aws_subnet" "subnet_1" {
#   vpc_id            = aws_vpc.main.id
#   cidr_block        = "10.0.1.0/24"
#   availability_zone = "your_availability_zone"
# }

# resource "aws_subnet" "subnet_2" {
#   vpc_id            = aws_vpc.main.id
#   cidr_block        = "10.0.2.0/24"
#   availability_zone = "your_availability_zone"
# }

# # Create Internet Gateway
# resource "aws_internet_gateway" "gw" {
#   vpc_id = aws_vpc.main.id
# }

# # Attach Internet Gateway to VPC
# resource "aws_vpc_attachment" "attach_gw" {
#   vpc_id       = aws_vpc.main.id
#   internet_gateway_id = aws_internet_gateway.gw.id
# }

# # Create EKS Cluster
# resource "aws_eks_cluster" "my_cluster" {
#   name     = "my-cluster"
#   role_arn = "arn:aws:iam::your_account_id:role/eks-cluster-role"
#   version  = "1.21"

#   vpc_config {
#     subnet_ids = [aws_subnet.subnet_1.id, aws_subnet.subnet_2.id]
#     security_group_ids = [aws_security_group.my_cluster_sg.id]
#   }

#   tags = {
#     Environment = "Production"
#   }
# }

# # Create Security Group for EKS Cluster
# resource "aws_security_group" "my_cluster_sg" {
#   vpc_id = aws_vpc.main.id

#   egress {
#     from_port   = 0
#     to_port     = 0
#     protocol    = "-1"
#     cidr_blocks = ["0.0.0.0/0"]
#   }

#   tags = {
#     Name = "my-cluster-sg"
#   }
# }

# # Create EKS node group
# resource "aws_eks_node_group" "my_node_group" {
#   cluster_name    = aws_eks_cluster.my_cluster.name
#   node_group_name = "my-node-group"
#   node_role_arn   = "arn:aws:iam::your_account_id:role/eks-node-role"
#   subnet_ids      = [aws_subnet.subnet_1.id, aws_subnet.subnet_2.id]
#   instance_types  = ["t3.medium"]
#   scaling_config {
#     desired_size = 2
#     max_size     = 5
#     min_size     = 1
#   }
# }

# # Create ELB
# resource "aws_lb" "my_alb" {
#   name               = "my-alb"
#   internal           = false
#   load_balancer_type = "application"
#   security_groups    = [aws_security_group.my_elb_sg.id]
#   subnets            = [aws_subnet.subnet_1.id, aws_subnet.subnet_2.id]

#   tags = {
#     Environment = "Production"
#   }
# }

# # Create Security Group for ELB
# resource "aws_security_group" "my_elb_sg" {
#   vpc_id = aws_vpc.main.id

#   ingress {
#     from_port   = 80
#     to_port     = 80
#     protocol    = "tcp"
#     cidr_blocks = ["0.0.0.0/0"]
#   }

#   egress {
#     from_port   = 0
#     to_port     = 0
#     protocol    = "-1"
#     cidr_blocks = ["0.0.0.0/0"]
#   }

#   tags = {
#     Name = "my-elb-sg"
#   }
# }

# # Create RDS Instance
# resource "aws_db_instance" "my_rds_instance" {
#   identifier             = "my-rds-instance"
#   allocated_storage      = 20
#   storage_type           = "gp2"
#   engine                 = "mysql"
#   engine_version         = "5.7"
#   instance_class         = "db.t2.micro"
#   name                   = "mydatabase"
#   username               = "admin"
#   password               = "your_password"
#   publicly_accessible    = false
#   db_subnet_group_name   = aws_db_subnet_group.my_db_subnet_group.name
# }

# # Create DB Subnet Group
# resource "aws_db_subnet_group" "my_db_subnet_group" {
#   name       = "my-db-subnet-group"
#   subnet_ids = [aws_subnet.subnet_1.id, aws_subnet.subnet_2.id]
#   tags = {
#     Environment = "Production"
#   }
# }

# # Create EC2 Instance for Jenkins
# resource "aws_instance" "jenkins_instance" {
#   ami                    = "your_ami_id"
#   instance_type          = "t2.micro"
#   subnet_id              = aws_subnet.subnet_1.id
#   key_name               = "your_key_name"
#   associate_public_ip_address = true

#   tags = {
#     Name = "jenkins-instance"
#   }
# }

# # Create IAM Role for Jenkins
# resource "aws_iam_role" "jenkins_role" {
#   name = "jenkins-role"
#   assume_role_policy = jsonencode({
#     Version = "2012-10-17",
#     Statement = [
#       {
#         Effect = "Allow",
#         Principal = {
#           Service = "ec2.amazonaws.com"
#         },
#         Action = "sts:AssumeRole"
#       }
#     ]
#   })
# }

# # Attach IAM Policy for Jenkins Role
# resource "aws_iam_policy_attachment" "jenkins_policy_attachment" {
#   name       = "jenkins-policy-attachment"
#   roles      = [aws_iam_role.jenkins_role.name]
#   policy_arn = "arn:aws:iam::aws:policy/AmazonRDSFullAccess"  # Example policy, adjust as needed
# }

# # Create AWS Backup Plan
# resource "aws_backup_plan" "jenkins_backup_plan" {
#   name        = "jenkins-backup-plan"
#   iam_role_arn = aws_iam_role.jenkins_role.arn

#   rule {
#     rule_name           = "jenkins-daily-snapshot"
#     target_vault_name   = "your_backup_vault_name"
#     start_window        = "07:00"
#     completion_window   = "07:30"
#     lifecycle {
#       cold_storage_after_days = 30
#     }
#   }
# }

# # Create S3 Bucket for ELB Access Logs
# resource "aws_s3_bucket" "elb_access_logs" {
#   bucket_prefix = "elb-access-logs-"
#   acl           = "private"

#   tags = {
#     Environment = "Production"
#   }
# }

# # Enable ELB Access Logging
# resource "aws_lb_bucket_logging" "elb_access_logging" {
#   load_balancer_arn = aws_lb.my_alb.arn
#   bucket            = aws_s3_bucket.elb_access_logs.bucket
#   prefix            = "elb-logs/"
# }
